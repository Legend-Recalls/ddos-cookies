// harvest-cookies.js
// Writes cookies-playwright.json and cookies.txt (Netscape cookie jar)
//
// Usage: node harvest-cookies.js
// This runs on GitHub Actions (ubuntu-latest) and will use puppeteer's bundled Chromium.

const fs = require('fs/promises');
const puppeteer = require('puppeteer');

const TARGET = process.env.TARGET || 'https://animepahe.ru';
const OUT_JSON = process.env.OUT_JSON || 'cookies-playwright.json';
const OUT_NETSCAPE = process.env.OUT_NETSCAPE || 'cookies.txt';
const MAX_WAIT_MS = Number(process.env.MAX_WAIT_MS || 25000);

function toNetscapeLine(cookie) {
  const domain = cookie.domain || '';
  const includeSub = domain.startsWith('.') ? 'TRUE' : 'FALSE';
  const pathv = cookie.path || '/';
  const secure = cookie.secure ? 'TRUE' : 'FALSE';
  const expires = Number.isFinite(cookie.expires) && cookie.expires > 0 ? Math.floor(cookie.expires) : 0;
  return `${domain}\t${includeSub}\t${pathv}\t${secure}\t${expires}\t${cookie.name}\t${cookie.value}`;
}

(async () => {
  console.log('[harvest] Launching Chromium (puppeteer) ...');
  const browser = await puppeteer.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
  });

  try {
    const page = await browser.newPage();

    // Set realistic UA
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116 Safari/537.36');

    // Block heavy assets & trackers
    await page.setRequestInterception(true);
    page.on('request', req => {
      const t = req.resourceType();
      const u = req.url();
      if (['image','stylesheet','font','media'].includes(t)) return req.abort();
      if (/googlesyndication|doubleclick|google-analytics|analytics|tracking|ads|cdn-cgi/i.test(u)) return req.abort();
      req.continue();
    });

    console.log('[harvest] Navigating to', TARGET);
    await page.goto(TARGET, { waitUntil: 'domcontentloaded', timeout: 30000 }).catch(()=>{});

    const start = Date.now();
    let finalHtml = '';
    while (Date.now() - start < MAX_WAIT_MS) {
      const cookies = await page.cookies();
      const names = cookies.map(c => c.name);
      if (names.some(n => n.startsWith('__ddg') || n === '__ddgid_' || n === '__ddgmark_')) {
        finalHtml = await page.content();
        if (!/DDoS-Guard|Checking your browser before accessing/i.test(finalHtml)) {
          console.log('[harvest] Challenge cleared (cookie & content).');
          break;
        }
      }
      const snippet = (await page.content()).slice(0, 400);
      if (!/DDoS-Guard|Checking your browser before accessing/i.test(snippet)) {
        finalHtml = await page.content();
        console.log('[harvest] Challenge cleared (content check).');
        break;
      }
      await new Promise(r => setTimeout(r, 700));
    }
    if (!finalHtml) {
      await page.waitForTimeout(1000);
      finalHtml = await page.content();
    }

    const cookies = await page.cookies();
    console.log('[harvest] Cookies:', cookies.map(c => `${c.name}=${c.value}`).slice(0,20));
    await fs.writeFile(OUT_JSON, JSON.stringify(cookies, null, 2), 'utf8');

    const lines = ['# Netscape HTTP Cookie File', '# Generated by harvest-cookies.js'];
    for (const c of cookies) lines.push(toNetscapeLine(c));
    await fs.writeFile(OUT_NETSCAPE, lines.join('\n'), 'utf8');

    console.log('[harvest] Wrote', OUT_JSON, 'and', OUT_NETSCAPE);
  } catch (err) {
    console.error('[harvest] Error:', err && err.stack ? err.stack : err);
    process.exit(2);
  } finally {
    await browser.close();
  }
})();
